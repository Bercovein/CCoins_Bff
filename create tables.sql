create database chopp_coins;
CREATE USER 'ccoins' IDENTIFIED BY 'chopp_coins2022';
grant all privileges on chopp_coins.* to  ccoins@'localhost';

create table if not exists GAMES_TYPES(
	ID INT AUTO_INCREMENT primary key,
    NAME VARCHAR(15) NOT NULL,
    PRIMARY KEY (ID)
);

create table if not exists OWNERS(
	ID int AUTO_INCREMENT,
    NICK_NAME varchar(20) not null,
    START_DATE DATETIME,
    EMAIL varchar(20) not null,
    PRIMARY KEY (ID)
);

alter table owners
	drop column NICK_NAME;
    
alter table owners
	modify column EMAIL varchar(20) not null unique;


create table if not exists BARS(
	ID int AUTO_INCREMENT,
    NAME varchar(50) not null,
    ADDRESS varchar(50) not null,
    START_DATE DATETIME,
    MENU_LINK varchar(100),
    FK_OWNER INT NOT NULL,
    PRIMARY KEY (ID),
    FOREIGN KEY (FK_OWNER) REFERENCES OWNERS(ID)
);

create table if not exists PRIZES(
	ID INT AUTO_INCREMENT,
    NAME varchar(50) not null,
    POINTS INT,
    START_DATE DATETIME,
    END_DATE DATETIME,
    ACTIVE INT DEFAULT 1,
    FK_BAR INT NOT NULL,
    PRIMARY KEY (id),
    FOREIGN KEY (FK_BAR) REFERENCES BARS(ID)
);

create table if not exists TABLES(
	ID INT AUTO_INCREMENT,
    NUMBER INT NOT NULL,
    CODE VARCHAR(50) NOT NULL,
    START_DATE DATETIME,
    ACTIVE INT DEFAULT 1,
    FK_BAR INT NOT NULL,
    PRIMARY KEY (id),
    FOREIGN KEY (FK_BAR) REFERENCES BARS(ID)
);

create table if not exists PARTIES(
	ID INT AUTO_INCREMENT,
    NAME VARCHAR(50) NOT NULL,
    START_DATE DATETIME,
    ACTIVE INT DEFAULT 1,
    FK_TABLE INT NOT NULL,
    PRIMARY KEY (id),
    FOREIGN KEY (FK_TABLE) REFERENCES TABLES(ID)
);

create table if not exists PRIZES(
	ID INT AUTO_INCREMENT,
    NAME VARCHAR(50) NOT NULL,
    START_DATE DATETIME,
    END_DATE DATETIME,
    POINTS INT NOT NULL,
    ACTIVE INT DEFAULT 1,
    FK_BAR INT NOT NULL,
    PRIMARY KEY (id),
    FOREIGN KEY (FK_BAR) REFERENCES BARS(ID)
);

create table if not exists WINNERS(
	ID INT AUTO_INCREMENT,
    START_DATE DATETIME,
    ACTIVE INT DEFAULT 1,
    FK_PRIZE INT NOT NULL,
    FK_PARTY INT NOT NULL,
    PRIMARY KEY (id),
    FOREIGN KEY (FK_PRIZE) REFERENCES PRIZES(ID),
    FOREIGN KEY (FK_PARTY) REFERENCES PARTIES(ID)
);

create table if not exists CLIENTS(
	ID INT,
    START_DATE DATETIME,
    NICK_NAME VARCHAR(50) NOT NULL,
    ACTIVE INT DEFAULT 1,
    FK_PARTY INT NOT NULL,
    PRIMARY KEY (id),
    FOREIGN KEY (FK_PARTY) REFERENCES PARTIES(ID)
);

create table if not exists GAMES(
	ID INT AUTO_INCREMENT,
    START_DATE DATETIME,
    END_DATE DATETIME,
    NAME VARCHAR(50) NOT NULL,
    RULES VARCHAR(500) NOT NULL,
    ACTIVE INT DEFAULT 1,
    FK_BAR INT NOT NULL,
    FK_GAME_TYPE INT NOT NULL,
    PRIMARY KEY (id),
    FOREIGN KEY (FK_BAR) REFERENCES BARS(ID),
    FOREIGN KEY (FK_GAME_TYPE) REFERENCES GAMES_TYPES(ID)
);

create table if not exists MATCHES(
	ID INT AUTO_INCREMENT,
    START_DATE DATETIME,
    END_DATE DATETIME,
    CODE VARCHAR(20) NOT NULL,
    ACTIVE INT DEFAULT 1,
    FK_GAME INT NOT NULL,
    PRIMARY KEY (id),
    FOREIGN KEY (FK_GAME) REFERENCES GAMES(ID)
);

create table if not exists VOTATIONS(
	ID INT AUTO_INCREMENT,
    ACTIVE INT DEFAULT 1,
    FK_MATCH INT NOT NULL,
    PRIMARY KEY (id),
    FOREIGN KEY (FK_MATCH) REFERENCES MATCHES(ID)
);

create table if not exists SONGS(
	ID INT AUTO_INCREMENT,
	NAME VARCHAR(100) NOT NULL,
    FK_VOTATION INT NOT NULL,
    PRIMARY KEY (id),
    FOREIGN KEY (FK_VOTATION) REFERENCES VOTATIONS(ID)
);

ALTER TABLE VOTATIONS ADD COLUMN FK_WINNER_SONG INT NOT NULL;

create table if not exists VOTES(
	ID INT AUTO_INCREMENT,
    START_DATE DATETIME,
    FK_SONG INT NOT NULL,
    FK_CLIENT INT NOT NULL,
    PRIMARY KEY (id),
    FOREIGN KEY (FK_SONG) REFERENCES SONGS(ID),
    FOREIGN KEY (FK_CLIENT) REFERENCES CLIENTS(ID)
);

create table if not exists COINS(
	ID INT AUTO_INCREMENT,
    START_DATE DATETIME,
    QUANTITY INT NOT NULL,
    ACTIVE INT DEFAULT 1,
    FK_CLIENT INT NOT NULL,
	FK_MATCH INT NOT NULL,
    PRIMARY KEY (id),
    FOREIGN KEY (FK_CLIENT) REFERENCES CLIENTS(ID),
    FOREIGN KEY (FK_MATCH) REFERENCES MATCHES(ID)
);


