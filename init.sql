USE chopp_coins;

CREATE TABLE if not exists games_types (
  id int NOT NULL AUTO_INCREMENT,
  NAME varchar(15) NOT NULL,
  PRIMARY KEY (id)
);

insert IGNORE into GAMES_TYPES (id, name) values (1, 'VOTE'), (2, 'GAME'), (3, 'CODE');

CREATE TABLE if not exists owners (
  ID int NOT NULL AUTO_INCREMENT,
  START_DATE datetime DEFAULT CURRENT_TIMESTAMP,
  EMAIL varchar(100) NOT NULL,
  SPTF_REFRESH_TOKEN varchar(500) DEFAULT NULL,
  PRIMARY KEY (ID)
);

CREATE TABLE if not exists bars (
  ID int NOT NULL AUTO_INCREMENT,
  NAME varchar(50) NOT NULL,
  ADDRESS varchar(50) NOT NULL,
  START_DATE timestamp NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  MENU_LINK varchar(100) DEFAULT NULL,
  FK_OWNER int NOT NULL,
  active tinyint(1) DEFAULT '1',
  OPEN_TIME time DEFAULT NULL,
  CLOSE_TIME time DEFAULT NULL,
  LOCATION varchar(50) DEFAULT NULL,
  PRIMARY KEY (ID),
  CONSTRAINT bars_ibfk_1 FOREIGN KEY (FK_OWNER) REFERENCES owners (ID)
);

CREATE TABLE if not exists prizes (
  ID int NOT NULL AUTO_INCREMENT,
  NAME varchar(50) NOT NULL,
  START_DATE datetime DEFAULT NULL,
  END_DATE datetime DEFAULT NULL,
  POINTS int NOT NULL,
  ACTIVE int DEFAULT '1',
  FK_BAR int NOT NULL,
  PRIMARY KEY (ID),
  KEY FK_BAR (FK_BAR),
  CONSTRAINT prizes_ibfk_1 FOREIGN KEY (FK_BAR) REFERENCES bars (ID)
);

CREATE TABLE if not exists bar_tables (
  ID int NOT NULL AUTO_INCREMENT,
  NUMBER int NOT NULL,
  CODE varchar(100) NOT NULL,
  START_DATE timestamp NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  ACTIVE int DEFAULT '1',
  FK_BAR int NOT NULL,
  PRIMARY KEY (ID),
  KEY FK_BAR (FK_BAR),
  CONSTRAINT bar_tables_ibfk_1 FOREIGN KEY (FK_BAR) REFERENCES bars (ID)
);

CREATE TABLE if not exists parties (
  ID int NOT NULL AUTO_INCREMENT,
  NAME varchar(50) NOT NULL,
  START_DATE datetime DEFAULT NULL,
  ACTIVE int DEFAULT '1',
  FK_TABLE int NOT NULL,
  PRIMARY KEY (ID),
  KEY FK_TABLE (FK_TABLE),
  CONSTRAINT parties_ibfk_1 FOREIGN KEY (FK_TABLE) REFERENCES bar_tables (ID)
);

CREATE TABLE if not exists clients (
  ID int NOT NULL AUTO_INCREMENT,
  START_DATE timestamp NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  NICK_NAME varchar(50) NOT NULL,
  ACTIVE int DEFAULT '1',
  ip varchar(100) NOT NULL,
  PRIMARY KEY (ID),
  UNIQUE KEY ip (ip)
);

CREATE TABLE if not exists clients_parties (
  id int NOT NULL AUTO_INCREMENT,
  FK_CLIENT int NOT NULL,
  FK_PARTY int NOT NULL,
  ACTIVE int DEFAULT '1',
  leader int DEFAULT '0',
  banned int DEFAULT '0',
  PRIMARY KEY (id),
  KEY FK_PARTY (FK_PARTY),
  KEY FK_CLIENT (FK_CLIENT),
  CONSTRAINT clients_parties_ibfk_1 FOREIGN KEY (FK_CLIENT) REFERENCES clients (ID),
  CONSTRAINT clients_parties_ibfk_2 FOREIGN KEY (FK_PARTY) REFERENCES parties (ID)
);

CREATE TABLE if not exists winners (
  ID int NOT NULL AUTO_INCREMENT,
  START_DATE datetime DEFAULT NULL,
  ACTIVE int DEFAULT '1',
  FK_PRIZE int NOT NULL,
  FK_PARTY int NOT NULL,
  points int NOT NULL,
  PRIMARY KEY (ID),
  KEY FK_PRIZE (FK_PRIZE),
  KEY FK_PARTY (FK_PARTY),
  CONSTRAINT winners_ibfk_1 FOREIGN KEY (FK_PRIZE) REFERENCES prizes (ID),
  CONSTRAINT winners_ibfk_2 FOREIGN KEY (FK_PARTY) REFERENCES parties (ID)
);

CREATE TABLE if not exists games (
  ID int NOT NULL AUTO_INCREMENT,
  NAME varchar(50) NOT NULL,
  RULES varchar(500) NOT NULL,
  ACTIVE int DEFAULT '1',
  FK_BAR int NOT NULL,
  FK_GAME_TYPE int NOT NULL,
  OPEN_TIME time DEFAULT NULL,
  CLOSE_TIME time DEFAULT NULL,
  POINTS int DEFAULT '0',
  PRIMARY KEY (ID),
  KEY FK_BAR (FK_BAR),
  KEY FK_GAME_TYPE (FK_GAME_TYPE),
  CONSTRAINT games_ibfk_1 FOREIGN KEY (FK_BAR) REFERENCES bars (ID),
  CONSTRAINT games_ibfk_2 FOREIGN KEY (FK_GAME_TYPE) REFERENCES games_types (id)
);

CREATE TABLE if not exists matches (
  ID int NOT NULL AUTO_INCREMENT,
  START_DATE datetime DEFAULT NULL,
  END_DATE datetime DEFAULT NULL,
  ACTIVE int DEFAULT '1',
  FK_GAME int NOT NULL,
  PRIMARY KEY (ID),
  KEY FK_GAME (FK_GAME),
  CONSTRAINT matches_ibfk_1 FOREIGN KEY (FK_GAME) REFERENCES games (ID)
);

CREATE TABLE if not exists votations (
  ID int NOT NULL AUTO_INCREMENT,
  ACTIVE int DEFAULT '1',
  FK_MATCH int NOT NULL,
  FK_WINNER_SONG int DEFAULT NULL,
  PRIMARY KEY (ID),
  KEY FK_MATCH (FK_MATCH),
  KEY FK_WINNER_SONG (FK_WINNER_SONG),
  CONSTRAINT votations_ibfk_1 FOREIGN KEY (FK_MATCH) REFERENCES matches (ID)
);

CREATE TABLE if not exists songs (
  ID int NOT NULL AUTO_INCREMENT,
  NAME varchar(100) NOT NULL,
  FK_VOTATION int NOT NULL,
  uri varchar(100) NOT NULL,
  PRIMARY KEY (ID),
  KEY FK_VOTATION (FK_VOTATION)
);

ALTER TABLE votations
ADD CONSTRAINT votations_ibfk_2
FOREIGN KEY (FK_WINNER_SONG)
REFERENCES songs (ID) ON UPDATE CASCADE;


CREATE TABLE if not exists votes (
  ID int NOT NULL AUTO_INCREMENT,
  START_DATE timestamp NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  FK_SONG int NOT NULL,
  FK_CLIENT int NOT NULL,
  PRIMARY KEY (ID),
  KEY FK_SONG (FK_SONG),
  KEY FK_CLIENT (FK_CLIENT),
  CONSTRAINT votes_ibfk_1 FOREIGN KEY (FK_SONG) REFERENCES songs (ID),
  CONSTRAINT votes_ibfk_2 FOREIGN KEY (FK_CLIENT) REFERENCES clients (ID)
);

CREATE TABLE if not exists coins (
  START_DATE timestamp NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  QUANTITY int NOT NULL,
  ACTIVE int DEFAULT '1',
  FK_MATCH int DEFAULT NULL,
  FK_CLIENT_PARTY int NOT NULL,
  id int NOT NULL AUTO_INCREMENT,
  FK_PRIZE int DEFAULT NULL,
  STATE varchar(20) DEFAULT NULL,
  updatable int DEFAULT NULL,
  PRIMARY KEY (id),
  KEY FK_MATCH (FK_MATCH),
  KEY FK_PRIZE (FK_PRIZE),
  KEY FK_CLIENT_PARTY (FK_CLIENT_PARTY),
  CONSTRAINT coins_ibfk_2 FOREIGN KEY (FK_MATCH) REFERENCES matches (ID),
  CONSTRAINT coins_ibfk_3 FOREIGN KEY (FK_CLIENT_PARTY) REFERENCES clients_parties (id),
  CONSTRAINT FK_PRIZE FOREIGN KEY (FK_PRIZE) REFERENCES prizes (ID)
);

CREATE TABLE if not exists codes (
  ID int NOT NULL AUTO_INCREMENT,
  CODE varchar(20) NOT NULL,
  PER_PERSON int DEFAULT '0',
  ONE_USE int DEFAULT '1',
  POINTS int DEFAULT '0',
  FK_MATCH int NOT NULL,
  FK_PRIZE int DEFAULT NULL,
  PRIMARY KEY (ID),
  KEY FK_MATCH (FK_MATCH),
  KEY FK_PRIZE (FK_PRIZE),
  CONSTRAINT codes_ibfk_1 FOREIGN KEY (FK_MATCH) REFERENCES matches (ID),
  CONSTRAINT codes_ibfk_2 FOREIGN KEY (FK_PRIZE) REFERENCES prizes (ID)
);


